// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250509120017_GuidS")]
    partial class GuidS
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("server.Models.AnswerOptionTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("SurveyQuestionTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionTemplateId");

                    b.HasIndex("SurveyTemplateId");

                    b.ToTable("AnswerOptionTemplates");
                });

            modelBuilder.Entity("server.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActiveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OptInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OptOutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            LastActiveTime = new DateTime(2025, 5, 9, 12, 0, 17, 269, DateTimeKind.Utc).AddTicks(9180),
                            Name = "Demo User",
                            OptInTime = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OptOutTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "+1234567890"
                        });
                });

            modelBuilder.Entity("server.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MessageTypeID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VonageMessageID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("MessageTypeID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("server.Models.MessageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MessageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TemplateText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("MessageTypeId");

                    b.ToTable("MessageTemplates");
                });

            modelBuilder.Entity("server.Models.MessageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageTypes");
                });

            modelBuilder.Entity("server.Models.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowOptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputControl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFreeText")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("server.Models.SmsOptInAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OptinTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WasSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SmsOptInAudits");
                });

            modelBuilder.Entity("server.Models.SmsStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsSmsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SmsStatuses");
                });

            modelBuilder.Entity("server.Models.SurveyQuestionTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("OrderInSurvey")
                        .HasColumnType("int");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("SurveyTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeID");

                    b.HasIndex("SurveyTemplateId");

                    b.ToTable("QuestionTemplates");
                });

            modelBuilder.Entity("server.Models.SurveyResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<Guid>("ResponseGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SurveyTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyTemplateId");

                    b.ToTable("SurveyResponses");
                });

            modelBuilder.Entity("server.Models.SurveyTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SurveyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("SurveyTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SurveyName = "TextDemo"
                        });
                });

            modelBuilder.Entity("server.Models.Surveys.SurveyResponseAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnswerOptionTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreeTextAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurveyQuestionTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyResponseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerOptionTemplateId");

                    b.HasIndex("SurveyQuestionTemplateId");

                    b.HasIndex("SurveyResponseId");

                    b.ToTable("SurveyResponseAnswers");
                });

            modelBuilder.Entity("server.Models.AnswerOptionTemplate", b =>
                {
                    b.HasOne("server.Models.SurveyQuestionTemplate", "SurveyQuestionTemplate")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("SurveyQuestionTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.SurveyTemplate", null)
                        .WithMany("Answers")
                        .HasForeignKey("SurveyTemplateId");

                    b.Navigation("SurveyQuestionTemplate");
                });

            modelBuilder.Entity("server.Models.Message", b =>
                {
                    b.HasOne("server.Models.Contact", "Contact")
                        .WithMany("Messages")
                        .HasForeignKey("ContactId");

                    b.HasOne("server.Models.MessageType", "MessageType")
                        .WithMany()
                        .HasForeignKey("MessageTypeID");

                    b.Navigation("Contact");

                    b.Navigation("MessageType");
                });

            modelBuilder.Entity("server.Models.MessageTemplate", b =>
                {
                    b.HasOne("server.Models.MessageType", "MessageType")
                        .WithMany()
                        .HasForeignKey("MessageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageType");
                });

            modelBuilder.Entity("server.Models.SurveyQuestionTemplate", b =>
                {
                    b.HasOne("server.Models.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.SurveyTemplate", "SurveyTemplate")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionType");

                    b.Navigation("SurveyTemplate");
                });

            modelBuilder.Entity("server.Models.SurveyResponse", b =>
                {
                    b.HasOne("server.Models.SurveyTemplate", "SurveyTemplate")
                        .WithMany()
                        .HasForeignKey("SurveyTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyTemplate");
                });

            modelBuilder.Entity("server.Models.SurveyTemplate", b =>
                {
                    b.HasOne("server.Models.Contact", null)
                        .WithMany("Surveys")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("server.Models.Surveys.SurveyResponseAnswer", b =>
                {
                    b.HasOne("server.Models.AnswerOptionTemplate", "AnswerOptionTemplate")
                        .WithMany()
                        .HasForeignKey("AnswerOptionTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("server.Models.SurveyQuestionTemplate", "SurveyQuestionTemplate")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.Models.SurveyResponse", "SurveyResponse")
                        .WithMany("Answers")
                        .HasForeignKey("SurveyResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerOptionTemplate");

                    b.Navigation("SurveyQuestionTemplate");

                    b.Navigation("SurveyResponse");
                });

            modelBuilder.Entity("server.Models.Contact", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("server.Models.SurveyQuestionTemplate", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("server.Models.SurveyResponse", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("server.Models.SurveyTemplate", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
